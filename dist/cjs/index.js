import{HttpResponse as t}from"standard-http-response-js";function e(e=[]){const s=e.map((t=>t.toUpperCase()));return function(e,o,a){return"development"==process.env.NODE_ENV&&s.includes(e.method)?a():o.status(401).send(t.error({errorMsg:"This API allow only in development"}))}}class s{methodCallbacks={GET:null,POST:null,PUT:null,DELETE:null,PATCH:null,HEAD:null,CONNECT:null,TRACE:null,OPTIONS:(t,e,s)=>{s()}};use(t="GET",e){this.methodCallbacks[t.toUpperCase()]=e}get(t){this.methodCallbacks.GET=t}post(t){this.methodCallbacks.POST=t}put(t){this.methodCallbacks.PUT=t}delete(t){this.methodCallbacks.DELETE=t}options(t){this.methodCallbacks.OPTIONS=t}trace(t){this.methodCallbacks.TRACE=t}connect(t){this.methodCallbacks.CONNECT=t}patch(t){this.methodCallbacks.PATCH=t}head(t){this.methodCallbacks.HEAD=t}handler(){return async(e,s,o)=>{if(this.methodCallbacks[e.method.toString().toUpperCase()])return await this.methodCallbacks[e.method.toString().toUpperCase()](e,s,o);s.send(t.error({message:"No route found"}))}}}function o(t,e,s){if("OPTIONS"==t.method)return console.log("preflight header with option"),void e.status(200).send("ok");s()}function a(t=[],e){return async function(s,o){let a=-1;const n=async(s,o)=>{a++;try{await t[a](s,o,(async()=>{a+1<t.length&&await n(s,o)}))}catch(t){return console.log("General error ",t),e?e(t,s,o):o.status(500).send({status:"Failed",message:"Unknown error occured",payload:{}})}};try{await n(s,o)}catch(t){return console.log("General error ",t),e?e(t,s,o):o.status(500).send({status:"Failed",message:"Unknown error occured",payload:{}})}}}function n(t){return Promise.resolve(t)==t}function l(t=[],e){return t=t.map((t=>t.toUpperCase())),async(s,o,a)=>{t.length>0&&t.includes(s.method)?e(s,o,a):a()}}export{s as MethodRouter,o as PreflightMiddleware,e as devMiddleware,n as isPromiseFunction,a as withMiddleware,l as withRequestMethod};
//# sourceMappingURL=index.js.map
